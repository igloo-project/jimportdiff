#! /usr/bin/env python3

import dataclasses
import itertools
import pathlib
import re
import shutil
import subprocess
import sys
from tkinter import W
import typing
import xml.etree.ElementTree

import cli_color_py
import click
import dataclasses_json


@dataclasses_json.dataclass_json
@dataclasses.dataclass
class JavaClass:
    groupId: str
    artifactId: str
    package: str
    name: str
    def __init__(self, groupId: str, artifactId: str, package: str, name: str):
        self.groupId = groupId
        self.artifactId = artifactId
        self.package = package
        self.name = name
    
    def __str__(self):
        return "{}:{}/{}{}".format(self.groupId, self.artifactId, self.package, "." + self.name if self.name else "")

    def __repr__(self):
        return str(self)


@dataclasses_json.dataclass_json
@dataclasses.dataclass
class Mapping:
    old: typing.Union[JavaClass, None]
    new: typing.Union[JavaClass, None]
    def __init__(self, old: JavaClass, new: JavaClass):
        self.old = old
        self.new = new


@dataclasses_json.dataclass_json
@dataclasses.dataclass
class Migration:
    mappings: typing.List[Mapping]
    def __init__(self, mappings: typing.List[Mapping]):
        self.mappings = mappings
    
    def find_mapping(self, old: str):
        return next(filter(lambda i: i.old is not None and "{}.{}".format(i.old.package, i.old.name) == old, self.mappings), None)


@click.group("jimportdiff")
def main():
    pass


@main.command("generate")
@click.argument("source", type=click.Path(file_okay=False, exists=True, resolve_path=True))
@click.argument("target", type=click.Path(file_okay=False, exists=True, resolve_path=True))
@click.option("--refresh", type=click.BOOL, default=False, is_flag=True)
@click.option("output", "--output", "-o", type=str, default="output.json")
def generate(source, target, refresh, output):
    if refresh:
        do_refresh(source)
        do_refresh(target)
    old_listing = listing(source)
    new_listing = listing(target)
    unmatched_items = list(new_listing)
    matched_items = []
    missing = []
    renamed = []
    for old in old_listing:
        matched = find_matching(old, unmatched_items)
        if matched is None:
            missing.append(old)
        else:
            if matched.package != old.package:
                renamed.append((old, matched))
            unmatched_items.remove(matched)
            matched_items.append(matched)
    print_simple("Removed", missing)
    print_simple("Added", unmatched_items)
    condensed_renamed = condensed(matched_items, renamed)
    print_renamed("Renamed", condensed_renamed)
    mappings = []
    mappings.extend([Mapping(None, i) for i in unmatched_items])
    mappings.extend([Mapping(i, None) for i in missing])
    mappings.extend([Mapping(i[0], i[1]) for i in renamed])
    write_migration(Migration(mappings), output)


@main.command("rewrite")
@click.argument("file", type=click.Path(file_okay=True, exists=True, resolve_path=True))
@click.argument("target", type=click.Path(file_okay=False, exists=True, resolve_path=True))
def rewrite(file, target):
    migration = read_migration(file)
    for java_file in itertools.chain(pathlib.Path(target).glob("**/src/main/java/**/*.java"), pathlib.Path(target).glob("**/src/test/java/**/*.java")):
        rewrite_java(java_file, migration)


def rewrite_java(file, migration):
    content = None
    with open(file, "r") as f:
        content = f.readlines()
    modified = False
    for idx, line in enumerate(content):
        if line.startswith("public ") or line.startswith("class ") or line.startswith("private "):
            break
        if line.startswith("import "):
            match = re.fullmatch(" *import (static)? *([^ ]+)\\.[^ .]* *;", line.strip())
            if not match:
                print(cli_color_py.red("Static import {} cannot be parsed".format(line)), file=sys.stderr)
                continue
            else:
                if match[1]:
                    # static, drop symbol name
                    import_statement = match[2][0:match[2].rindex(".")]
                else:
                    import_statement = match[2]
                # check if this import is for an inner class, based on uppercase symbol name
                symbols = import_statement.split(".")
                if len(symbols) > 1 and re.fullmatch("[A-Z].*", symbols[-2]) is not None:
                    # package.A.B -> package.A
                    import_statement = ".".join(symbols[0:-1])
                print(import_statement)
        else:
            # not an import line
            continue
        mapping = migration.find_mapping(import_statement)
        if mapping is not None:
            if mapping.new is None:
                print("No replacement for {} in {}".format(import_statement, pathlib.Path(file).name))
            else:
                content[idx] = line.replace(import_statement, "{}.{}".format(mapping.new.package, mapping.new.name))
                modified = True
    if modified:
        with open(file, "w") as f:
            f.writelines(content)
        print("File {} modified".format(file))


def condensed(matched_items, renamed):
    new_renamed = []
    condensed = []
    for (old, new) in renamed:
        if next(filter(lambda i: i.package == old.package and i.artifactId == old.artifactId, condensed), None):
            # already condensed
            continue
        others = list(filter(lambda i: i.package == old.package, matched_items))
        others_renamed = list(filter(lambda i: i[0].package == old.package and i[1].artifactId != new.artifactId and i[1].package != new.package, renamed))
        if not others and not others_renamed:
            # no items kept in same package and all renames consistent
            new_renamed.append((JavaClass(old.groupId, old.artifactId, old.package, ""), JavaClass(new.groupId, new.artifactId, new.package, "")))
            condensed.append(old)
        else:
            new_renamed.append((old, new))
    return new_renamed


def do_refresh(path):
    subprocess.check_call(["mvn", "clean"], cwd=path)
    for i in pathlib.Path(path).glob("**/target"):
        shutil.rmtree(i)
    subprocess.check_call(["mvn", "package", "-DskipTests"], cwd=path)


def print_simple(title, collection):
    keyfunc = lambda i: i.artifactId
    collection = sorted(collection, key=keyfunc)
    print(cli_color_py.red(title))
    for artifactId, java_classes in itertools.groupby(collection, keyfunc):
        print(cli_color_py.blue(artifactId))
        print("\n".join(["  {}.{}".format(i.package, i.name) for i in java_classes]))


def print_renamed(title, collection):
    # sort by artifact then package-only
    keyfunc = lambda i: i[0].artifactId
    collection = sorted(collection, key=lambda i: 1 if i[0].name else 0)
    collection = sorted(collection, key=keyfunc)
    print(cli_color_py.red(title))
    def target(source, target):
        acc = ""
        if source.artifactId != target.artifactId:
            acc += target.artifactId + "/"
        acc += "{}{}".format(target.package, "." + target.name if target.name else "")
        return acc
    for artifactId, java_classes in itertools.groupby(collection, keyfunc):
        print(cli_color_py.blue(artifactId))
        print("\n".join(["  {}{} -> {}".format(i[0].package, "." + i[0].name if i[0].name else "", target(i[0], i[1])) for i in java_classes]))


def write_migration(migration: Migration, output: str):
    with open("output.json", "w") as output:
        output.write(migration.to_json(indent=2))


def read_migration(file: str):
    with open(file, "r") as inp:
        return Migration.from_json(inp.read())

def find_matching(old, new_listing):
    return next(filter(lambda i: old.name == i.name, new_listing), None)


def listing(folder):
    path = pathlib.Path(folder)
    cache = dict()
    ignore_anonymous_re = re.compile("\\$[0-9]+")
    ignore_anonymous = lambda a: ignore_anonymous_re.search(a) is None
    return list([to_java_class(cache, i) for i in path.glob("**/target/classes/**/*.class") if ignore_anonymous(i.name)])


def to_java_class(cache, path):
    parent = path.parent
    pom_xml = parent / 'pom.xml'
    while not pom_xml.exists():
        parent = parent.parent
        pom_xml = parent / 'pom.xml'
    if pom_xml in cache:
        artifactId = cache[pom_xml][1]
    else:
        with pom_xml.open() as f:
            tree = xml.etree.ElementTree.parse(f)
            artifactId = tree.findall('./{*}artifactId')[0].text
            cache[pom_xml] = (None, artifactId)
    name = path.name[0:-6]
    package = str(path.relative_to(parent / 'target/classes').parent).replace("/", ".")
    java_class = JavaClass("", artifactId, package, name.replace("$", "."))
    return java_class


if __name__ == "__main__":
    main()
